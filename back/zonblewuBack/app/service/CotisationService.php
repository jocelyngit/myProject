<?php


namespace App\service;

use App\Compte;

use App\CompteDeDepot;

use App\Opportunite;

use Illuminate\Support\Facades\DB;

use http\Client\Response;
use Illuminate\Http\Request;

use Illuminate\Support\Collection;
use PhpParser\Builder\Param;

class CotisationService extends GenericService
{

    public function __construct()
    {
        parent::__construct();
    }

    public function store(\Illuminate\Http\Request $req)
    {
         //return parent::store($req); // TODO: Change the autogenerated stub

        //error_log($req->param) ;
        $montantDeDepot = $req->montantVerse;

        $montantRestantDepot = $montantDeDepot;

        $idDepotMarketeur = $req->idDepotMarketeur;

        $idCptDeDepot = null;

        error_log('idDepotMarketeur');
        error_log($idDepotMarketeur);

        $soldeForCptDep = null;

        $varTest = null;

        // Récupération de la classe
        $cl = $req->classe;

        // tester si le dépôt du marketeur a été régulariser

        $depot = DB::select('select distinct cotisations.id as id
        from cotisations, depot_marketeurs
        where cotisations.idDepot = :id
        and cotisations.idDepot = depot_marketeurs.id', ['id' => $idDepotMarketeur]);

        if ($depot == [])
        {

        // décodage du json envoyé
        $parsed_json = json_decode($req->param,true);

        foreach ($parsed_json as $key => $value)
        {
            error_log($key);

        foreach($value as  $val)
        {

            $numCompte = $val['numCompte'];
            error_log($numCompte);

            $idCompte = $val['idCompte'];
            error_log($idCompte);

            $idCompteDep = $val['idCompteDep'];
            error_log($idCompteDep);
            //$idCptDeDepot = $idCompteDep;

            $mtCotisation = $val['montantCotisation'];
            error_log($mtCotisation);

            $idMembre = $val['idMembre'];
            error_log($idMembre);

            $idAgent = $val['idAgent'];
            error_log($idAgent);

            $mise = $val['mise'];
            error_log($mise);

            $idUser = $val['idUser'];
            error_log($idUser);

            $dateCotisation = $val['dateCotisation'];
            error_log($dateCotisation);

        // Requete pour afficher si l'utilisateur
        // a cotisé déja dans le mois en cour

        $results = DB::select('select cotisations.id as id
        from cotisations, membres, comptes
        where cotisations.idMembre = :id
        and extract(month from cotisations.dateCotisation) = extract(month from current_date )
        and cotisations.idMembre = membres.id', ['id' => $idMembre]);

       // foreach ($results as $valeur)
       // {
       //     $id = $valeur->id;
       // }

        if ($results == [])
        {

            //echo ('vide');

            // Enlever la commission
            // première cotisation dans le mois

            if ($mtCotisation >= $mise) {
                # code...
                $mtCotisationUpdate = $mtCotisation - $mise;

                $packageClass = 'App\\'.$cl;

                $instanceCotisation = $packageClass::create(
                                                    ['dateCotisation' => $dateCotisation,
                                                    'montantCotisation' => $mtCotisationUpdate,
                                                    'idMembre' => $idMembre,
                                                    'idCompte' => $idCompte,
                                                    'idUser' => $idUser,
                                                        'idDepot'=> $idDepotMarketeur
                                                    ]
                );

                // condition pour mettre à jour
                // le solde du compte
                if (is_object($instanceCotisation)) {

                    // enregistrement de la commission
                    $packageCommission = 'App\Commission';

                    $instanceCom = $packageCommission::create([
                        'dateCommission' => $dateCotisation,
                        'montantCommission' => $mise,
                        'idUser' => $idUser,
                        'idMembre' => $idMembre,
                        'idAgent' => $idAgent
                    ]);

                    if (is_object($instanceCom)) {

                        // Mise à jour du solde du compte
                        $package = 'App\Compte';

                        $instanceCompte = $package::find($idCompte);

                        if (is_object($instanceCompte)) {
                            $nvSolde = $instanceCompte['solde'] + $mtCotisationUpdate;

                            $instanceCompte->update([
                                'solde' => $nvSolde
                            ]);

                            // condition pour mettre à jour les
                            // Opportunités

                            if ($instanceCompte) {
                                // Mise à jour des opportunités

                                $packageOpp = 'App\Opportunite';

                                // requete pour obtenir l'id de l'opportunite
                                $oppId = DB::table('opportunites')
                                    ->join('comptes', 'opportunites.idCompte', '=', 'comptes.id')
                                    ->select('opportunites.id', 'oct', 'olt', 'omt', 'opportunites.idCompte as idCompte')
                                    ->where('opportunites.idCompte', '=', $idCompte)
                                    ->get();

                                error_log('idOpp2');
                                error_log($oppId);


                                if ($oppId->count()) {

                                    foreach ($oppId as $val) {
                                        $idOpp = $val->id;

                                        error_log('idOPP trove');
                                        error_log($idOpp);
                                    }

                                    //
                                    $instanceOpp = $packageOpp::find($idOpp);

                                    if (is_object($instanceOpp)) {
                                        # code...
                                        $oct = ($instanceOpp['oct']) + ($mtCotisationUpdate * 7 / 20);

                                        $omt = ($instanceOpp['omt']) + ($mtCotisationUpdate * 3 / 20);

                                        $olt = ($instanceOpp['olt']) + ($mtCotisationUpdate * 10 / 20);

                                        $instanceOpp->update([
                                            'oct' => $oct,
                                            'omt' => $omt,
                                            'olt' => $olt
                                        ]);

                                        // condition pour mettre à jour
                                        // le compte de depot et
                                        // les dépôt marketeur
                                        if ($instanceOpp) {

                                            //Mise à jour compte de depot Agent Marketeur
                                            $packageDepMak = 'App\DepotMarketeur';

                                            $instanceDepMarketeur = $packageDepMak::find($idDepotMarketeur);

                                            error_log($instanceDepMarketeur);

                                            if (is_object($instanceDepMarketeur)) {
                                                $soldeInit = $instanceDepMarketeur['resteDepot'];

                                                $soldeInit = $soldeInit - $mtCotisation;

                                                $soldeForCptDep = $soldeInit;

                                                $instanceDepMarketeur->update([
                                                    'resteDepot' => $soldeInit
                                                ]);

                                                if ($instanceDepMarketeur) {
                                                    $varTest = 1;
                                                }

                                            }
                                        }
                                    }
                                } else {
                                    # code...
                                    $packageOpp = 'App\Opportunite';

                                    $octNv = ($mtCotisationUpdate * 7 / 20);

                                    $omtNv = ($mtCotisationUpdate * 3 / 20);

                                    $oltNv = ($mtCotisationUpdate * 10 / 20);

                                    $instanceCreationOpp = $packageOpp::create(
                                        ['oct' => $octNv,
                                            'omt' => $omtNv,
                                            'olt' => $oltNv,
                                            'idCompte' => $idCompte,

                                        ]
                                    );

                                    if (is_object($instanceCreationOpp)) {

                                        //Mise à jour compte de depot Agent Marketeur
                                        $packageDepMak = 'App\DepotMarketeur';

                                        $instanceDepMarketeur = $packageDepMak::find($idDepotMarketeur);

                                        error_log($instanceDepMarketeur);

                                        if (is_object($instanceDepMarketeur)) {

                                            $soldeInit = $instanceDepMarketeur['resteDepot'];

                                            $soldeInit = $soldeInit - $mtCotisation;

                                            $soldeForCptDep = $soldeInit;

                                            $instanceDepMarketeur->update([
                                                'resteDepot' => $soldeInit
                                            ]);

                                            if ($instanceDepMarketeur) {
                                                $varTest = 1;
                                            }

                                        }
                                    }
                                }

                            }
                        }
                    }
                }

                else
         {
            // $varTest = 0;


            // * return \response()->json([
            //    'error' => true,
             //   'msg' => 'Erreur!! Réessayez !!',
        //]);

    //break;


         }

        }

              // FIN IF ($results == [])
        }
        else
        {
             // package de la classe
            // enregistrement de la cotisation

         $packageClass = 'App\\'.$cl;

         $instanceCotisation = $packageClass::create(
            ['dateCotisation' => $dateCotisation,
            'montantCotisation' => $mtCotisation,
            'idMembre' => $idMembre,
            'idCompte' => $idCompte,
            'idUser' => $idUser,
                'idDepot'=> $idDepotMarketeur
            ]
         );

         // condition de mise à jour du compte principal
         if (is_object($instanceCotisation))
         {
             // Misa à jour du solde du compte
            $package = 'App\Compte';

         $instanceCompte = $package::find($idCompte);

            if (is_object($instanceCompte))
            {
                    $nvSolde = $instanceCompte['solde'] + $mtCotisation;

                    $instanceCompte->update([
                     'solde' => $nvSolde
                    ]);

                    // condition de mise à jour des opportunités
                    if ($instanceCompte)
                    {
                            // Mise à jour des opportunités

                             // requete pour obtenir l'id de l'opportunite
                             $oppId = DB::table('opportunites')

                             ->join('comptes', 'opportunites.idCompte', '=', 'comptes.id')

                             ->select('opportunites.id','oct', 'olt', 'omt', 'opportunites.idCompte as idCompte')

                             ->where('opportunites.idCompte', '=', $idCompte)

                             ->get();

                             if ($oppId->count()) {

                                 foreach ($oppId as $val) {
                                     $idOpp2 = $val->id;

                                     error_log('idOPP trove');
                                     error_log($idOpp2);
                                 }


                                 $packageOpp = 'App\Opportunite';

                                 $instanceOpp = $packageOpp::find($idOpp2);

                                 if (is_object($instanceOpp)) {
                                     # code...
                                     $oct = ($instanceOpp['oct']) + ($mtCotisation * 7/20);

                                     $omt = ($instanceOpp['omt']) + ($mtCotisation * 3/20);

                                     $olt = ($instanceOpp['olt']) + ($mtCotisation * 10/20);

                                     $instanceOpp->update([
                                     'oct' => $oct,
                                     'omt' => $omt,
                                     'olt' => $olt
                                 ]);


                                     // condition de mise à jour
                                     // du compte de dépot des marketeurs

                                     if ($instanceOpp) {
                                        //Mise à jour compte de depot Agent Marketeur
                                        $packageDepMak = 'App\DepotMarketeur';

                                        $instanceDepMarketeur = $packageDepMak::find($idDepotMarketeur);

                                        error_log($instanceDepMarketeur);

                                        if (is_object($instanceDepMarketeur)) {

                                        $soldeInit = $instanceDepMarketeur['resteDepot'];

                                        $soldeInit = $soldeInit - $mtCotisation;

                                        $soldeForCptDep = $soldeInit;

                                            $instanceDepMarketeur->update([
                                                    'resteDepot' => $soldeInit
                                                     ]);

                                            if ($instanceDepMarketeur) {
                                                $varTest = 1;
                                            }


                                         }
                                     }
                                 }
                             }
                             else {
                                # code...
                                $packageOpp = 'App\Opportunite';

                                $octNv =  ($mtCotisation * 7/20);

                                $omtNv =  ($mtCotisation * 3/20);

                                $oltNv =  ($mtCotisation * 10/20);

                                $instanceCreationOpp = $packageOpp::create(
                                    ['oct' => $octNv,
                                    'omt' => $omtNv,
                                    'olt' => $oltNv,
                                    'idCompte' => $idCompte
                                    ]
                                );

                                if (is_object($instanceCreationOpp) ) {

                                   //Mise à jour compte de depot Agent Marketeur
                                   $packageDepMak = 'App\DepotMarketeur';

                                   $instanceDepMarketeur = $packageDepMak::find($idDepotMarketeur);

                                   error_log($instanceDepMarketeur);

                                   if (is_object($instanceDepMarketeur)) {

                                   $soldeInit = $instanceDepMarketeur['resteDepot'];

                                   $soldeInit = $soldeInit - $mtCotisation;

                                   $soldeForCptDep = $soldeInit;

                                       $instanceDepMarketeur->update([
                                               'resteDepot' => $soldeInit
                                                ]);


                                        if ($instanceDepMarketeur)
                                        {
                                            $varTest  = 1;
                                        }

                                    }
                                }
                            }

         }
    }

         }
         else
         {
            // $varTest = 0;

             //* return \response()->json([
              //  'error' => true,
              //  'msg' => 'Erreur!! Réessayez !!',
        //]);

        //break;


         }

         // FIN ELSE $RESULTS = []
        }

        // FIN FOREACH DES VALEURS
        }


        // FIN FOREACH DES CLES
    }


    error_log($varTest);

    if ($varTest == 1) {

        # code...
        return \response()->json([
            'error' => false,
            'msg' => 'Mise à jour effectuée avec succès'
        ], 200);
        # code...
        /*
            # code...
            $packageCptDep = 'App\CompteDeDepot';

            $instanceCompteDep = $packageCptDep::find($idCompteDep);

            error_log($instanceCompteDep);

            if (is_object($instanceCompteDep)) {

                //  foreach ($instanceCompteDep as  $value) {
                # code...

                $soldeDepInit = $instanceCompteDep['soldeDep'];
                // }

                error_log($soldeDepInit);

                error_log($soldeForCptDep);

                $nvSoldeDep = $soldeDepInit + $soldeForCptDep;

                $instanceCompteDep->update(
                    ['soldeDep' => $nvSoldeDep]
                //array('soldeDep' => $nvSoldeDep )
                );

                if ($instanceCompteDep) {
                    # code...
                    return \response()->json([
                        'error' => false,
                        'msg' => 'Mise à jour effectuée avec succès'
                    ], 200);
                    # code...
                }
            }

        */
    }

        }
        else
        {
            return \response()->json([
                'error' => true,
                'msg' => 'Un dépôt ne peut être régularisé qu\'une seule fois.'
            ], 200);
            # code...
        }

    }

    public function allCotisation(String $class)
    {
        // requete

        $allCotisation = DB::table('cotisations')

        ->join('membres', 'cotisations.idMembre', '=', 'membres.id')

        ->join('agent_marketings', 'membres.idMarketeur', '=', 'agent_marketings.id')

        ->join('comptes', 'cotisations.idCompte', '=', 'comptes.id')

        ->select('cotisations.id as id', 'comptes.id as idCompte', 'numCompte', 'dateCotisation', 'montantCotisation', 'membres.id as idMembre', 'membres.mise as mise', 'membres.nomMembre as nomMembre','membres.prenomMembre as prenomMembre', 'agent_marketings.id as idMarketeur', 'agent_marketings.nomAg as nomAg', 'agent_marketings.prenomAg as prenomAg')

        ->get();

        return $allCotisation ;

    }

    public function cotisationParDate(\Illuminate\Http\Request $request)
    {

        $allCotisationParDate = DB::table('cotisations')

            ->join('membres', 'cotisations.idMembre', '=', 'membres.id')

            ->join('agent_marketings', 'membres.idMarketeur', '=', 'agent_marketings.id')

            ->join('comptes', 'cotisations.idCompte', '=', 'comptes.id')

            ->select('cotisations.id as id', 'comptes.id as idCompte', 'numCompte', 'dateCotisation', 'montantCotisation', 'membres.id as idMembre', 'membres.mise as mise', 'membres.nomMembre as nomMembre','membres.prenomMembre as prenomMembre', 'agent_marketings.id as idMarketeur', 'agent_marketings.nomAg as nomAg', 'agent_marketings.prenomAg as prenomAg')

            ->where('dateCotisation','=',$request->dateCotisation)

            ->get();

        if ($allCotisationParDate->count())
        {
            $data = [
                'error' => false,
                'msg' => 'Enregistrement chargé avec succès',
                'nbLigne' => $allCotisationParDate->count(),
                'donne' => $allCotisationParDate
            ];
            return $data ;
        }
        else
        {

            $data = [
                'error' => true,
                'msg' => 'Pas de cotisation à cette date'
            ];

            return $data;

        }


    }

    public function cotisationParMois(\Illuminate\Http\Request $request)
    {

        $cotParMois = DB::select('select distinct cotisations.id as id, comptes.id as idCompte, numCompte, dateCotisation, montantCotisation, membres.id as idMembre, membres.mise as mise, membres.nomMembre as nomMembre,membres.prenomMembre as prenomMembre, agent_marketings.id as idMarketeur, agent_marketings.nomAg as nomAg, agent_marketings.prenomAg as prenomAg
        from cotisations, membres, comptes, agent_marketings
        where extract(month from cotisations.dateCotisation) = :mois
        and cotisations.idMembre = membres.id
        and cotisations.idCompte = comptes.id
        and membres.idMarketeur = agent_marketings.id', ['mois' => $request->codeMois]);

        if ($cotParMois == [])
        {
            $data = [
                'error' => true,
                'msg' => 'Pas de cotisation à ce mois'
            ];

            return $data;
        }else
        {
            $p = [];
            $i = 0;
            foreach ($cotParMois as $value)
            {

                $p[$i]['id'] = $value->id;
                $p[$i]['idCompte'] = $value->idCompte;
                $p[$i]['numCompte'] = $value->numCompte;
                $p[$i]['dateCotisation'] = $value->dateCotisation;
                $p[$i]['montantCotisation'] = $value->montantCotisation;
                $p[$i]['idMembre'] = $value->idMembre;
                $p[$i]['mise'] = $value->mise;
                $p[$i]['nomMembre'] = $value->nomMembre;
                $p[$i]['prenomMembre'] = $value->prenomMembre;
                $p[$i]['idMarketeur'] = $value->idMarketeur;
                $p[$i]['nomAg'] = $value->nomAg;
                $p[$i]['prenomAg'] = $value->prenomAg;

                $i++;
            }

            $data = [
                'error' => false,
                'msg' => 'Enregistrement chargé avec succès',
                'nbLigne' => $i,
                'donne' => $p
            ];
            return $data;

        }

    }

    public function cotisationAgentParMois(\Illuminate\Http\Request $request)
    {

        $cotAgentParMois = DB::select('select distinct cotisations.id as id, comptes.id as idCompte, numCompte, dateCotisation, montantCotisation, membres.id as idMembre, membres.mise as mise, membres.nomMembre as nomMembre,membres.prenomMembre as prenomMembre, agent_marketings.id as idMarketeur, agent_marketings.nomAg as nomAg, agent_marketings.prenomAg as prenomAg
        from cotisations, membres, comptes, agent_marketings
        where extract(month from cotisations.dateCotisation) = :mois
        and agent_marketings.id = :idAgent
        and cotisations.idMembre = membres.id
        and cotisations.idCompte = comptes.id
        and membres.idMarketeur = agent_marketings.id', ['mois' => $request->codeMois, 'idAgent'=> $request->idAgent ]);

        if ($cotAgentParMois == [])
        {
            $data = [
                'error' => true,
                'msg' => 'Pas de cotisation à ce mois'
            ];

            return $data;
        }else
        {
            $p = [];
            $i = 0;
            foreach ($cotAgentParMois as $value)
            {

                $p[$i]['id'] = $value->id;
                $p[$i]['idCompte'] = $value->idCompte;
                $p[$i]['numCompte'] = $value->numCompte;
                $p[$i]['dateCotisation'] = $value->dateCotisation;
                $p[$i]['montantCotisation'] = $value->montantCotisation;
                $p[$i]['idMembre'] = $value->idMembre;
                $p[$i]['mise'] = $value->mise;
                $p[$i]['nomMembre'] = $value->nomMembre;
                $p[$i]['prenomMembre'] = $value->prenomMembre;
                $p[$i]['idMarketeur'] = $value->idMarketeur;
                $p[$i]['nomAg'] = $value->nomAg;
                $p[$i]['prenomAg'] = $value->prenomAg;

                $i++;
            }

            $data = [
                'error' => false,
                'msg' => 'Enregistrement chargé avec succès',
                'nbLigne' => $i,
                'donne' => $p
            ];
            return $data;

        }

    }
}
