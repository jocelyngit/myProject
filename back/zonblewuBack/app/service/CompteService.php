<?php


namespace App\service;


use Illuminate\Support\Facades\DB;

use http\Client\Response;
use Illuminate\Http\Request;

class CompteService extends GenericService
{
    // Constructeur

    public function __construct()
    {
        parent::__construct();
    }

    public function findAll(string $class)
    {
         //return parent::store($req); // TODO: Change the autogenerated stub

         // requete

        $compteListe = DB::table('comptes')

        ->join('membres', 'comptes.idMembre', '=', 'membres.id')

        ->join('agences', 'comptes.idAgence', '=', 'agences.id')

        ->select('comptes.id as id','numCompte','dateCreation', 'solde', 'membres.nomMembre as nomMembre','membres.prenomMembre as prenomMembre','agences.agence as agence')

        ->get();

        return $compteListe;
    }

    public function infoCompte(string $numeroCompte)
    {

        $infoCompte = DB::table('comptes')

        ->join('membres', 'comptes.idMembre', '=', 'membres.id')

        ->join('agences', 'comptes.idAgence', '=', 'agences.id')

        ->select('comptes.id as id','dateCreation', 'solde', 'membres.mise as mise', 'comptes.idMembre as idMembre', 'membres.nomMembre as nomMembre','membres.prenomMembre as prenomMembre','agences.agence as agence')

        ->where('comptes.numCompte', '=', $numeroCompte)

        ->get();

        //error_log($infoCompte);

        if ($infoCompte->isEmpty())
    {
        return \response()->json([
            'error' => true,
            'msg' => 'Compte erroné. Réessayez svp!!'
    ]);

    }else {
        # code...
        return \response()->json([
            'error' => false,
            'msg' => $infoCompte
    ]);
    }


    }

    public function store(Request $req)
    {
        //return parent::store($req); // TODO: Change the autogenerated stub

        $idAgence = $req->idAgence;

        // requete pour recupérer le libellé de l'agence

        $libelleAgence = DB::table('agences')

            ->select('agences.agence as agence')

            ->where('id', '=', $idAgence)

            ->get();

        foreach ($libelleAgence as $result) {

            $libelle = $result->agence;

        }

        // requete pour compter le nombre de ligne dans la table

        $nbLigne = DB::table('comptes')

            ->select(DB::raw('count(*) as nbr'))

            ->get();

            foreach ($nbLigne as $result) {

                $nb = $result->nbr;

            }

        // vérification de l'agence pour génération de
        // numéro de compte


        $numeroCompte = 10000000+$nb+1;

        if ($libelle == 'LYS')
        {
            # code...

        $req->numCompte = '01'.$numeroCompte;

        }
        elseif ($libelle == 'SUCCES')
        {
            # code...
        //$numeroCompte = 2000000+$nb+1;

        $req->numCompte = '02'.$numeroCompte;

        }
        elseif ($libelle == 'EMERAUDE')
        {

            # code...
        //$numeroCompte = 3000000+$nb+1;

        $req->numCompte = '03'.$numeroCompte;

        }

        $cl = $req->classe;

        // package de la classe
        $packageClass = 'App\\'.$cl;

        // verification si on a déja enregistré un compte pour un membre

        $compteExistant = DB::table('comptes')

            ->join('membres', 'comptes.idMembre', '=', 'membres.id')

            //->join('agences', 'comptes.idAgence', '=', 'agences.id')

            ->select('comptes.id as id')

            ->where('comptes.idMembre', '=', $req->idMembre)

            ->get();


        if ($compteExistant->isEmpty())
        {

            $instanceClasse = $packageClass::create(
                ['numCompte' => $req->numCompte,
                    'dateCreation'=> $req->dateCreation,
                    'idMembre' => $req->idMembre,
                    'idAgence' => $req->idAgence,
                    'idUser' => $req->idUser
                ]);

            if ( is_object($instanceClasse) ) {
                //throw new \Exception('Erreur veuillez Ressayer');

                // COmmemt capturer l'erreur spécifique
                return \response()->json([
                    'error' => false,
                    'msg' => $cl.' créé avec succès!!'
                ], 200);
            } else {
                return \response()->json([
                    'error' => true,
                    'msg' => 'Erreur!! Réessayez !!',
                ]);
            }

        }else {
            # code...
            return \response()->json([
                'error' => true,
                'msg' => 'Ce membre possede déja un compte zomblewou. Vous ne pouvez plus lui en créer.'
            ]);
        }



    }

    // fonction pour ressortir le solde des comptes de chaque membres
    public function soldeCompte()
    {
        $result = DB::select('select
        comptes.id as id,
        comptes.idMembre ,
        comptes.numCompte,
        membres.nomMembre,
        membres.prenomMembre,
        membres.mise,
        solde,
        opportunites.oct,
        opportunites.omt,
        opportunites.olt,
        membres.idMarketeur,
        agent_marketings.nomAg,
        agent_marketings.prenomAg

        from membres, comptes, opportunites, agent_marketings

        where comptes.idMembre = membres.id

        and comptes.id = opportunites.idCompte

        and membres.idMarketeur = agent_marketings.id');

        return $result;

    }

    public function soldeCaisse()
    {
        $result = DB::select('select
        SUM(comptes.solde) as totalCompte,
        SUM(opportunites.oct) as totalOct,
        SUM(opportunites.omt) as totalOmt,
        SUM(opportunites.olt) as totalOlt,
        current_timestamp() as dateOfRequest

        from  comptes,  opportunites');

        return $result;

    }

//SUM(opportunites.oct) as totalOct,
//SUM(opportunites.omt) as totalOmt,
//SUM(opportunites.olt) as totalOlt opportunites
//
//        where comptes.id = opportunites.idCompte

}
