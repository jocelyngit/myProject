<?php


namespace App\service;

use Illuminate\Support\Facades\DB;

use http\Client\Response;
use Illuminate\Http\Request;

use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Date;

class DepotMarketeurService extends GenericService
{
    // Constructeur

    public function __construct()
    {
        parent::__construct();
    }


    public function findAll(string $class)
    {
         //return parent::store($req); // TODO: Change the autogenerated stub

         // requete

        $depotMarketeurListe = DB::table('depot_marketeurs')

        ->join('agent_marketings', 'depot_marketeurs.idAgent', '=', 'agent_marketings.id')

        ->join('compte_de_depots', 'depot_marketeurs.idCptDepot', '=', 'compte_de_depots.id')

        ->select('depot_marketeurs.id as id', 'agent_marketings.id as idAgent', 'compte_de_depots.id as idCompte', 'numCompteDep','dateDepot', 'montantDepot', 'resteDepot', 'agent_marketings.nomAg as nomAg','agent_marketings.prenomAg as prenomAg')

        ->get();

        return $depotMarketeurListe;
    }

    public function getDepotDuDjour( int $id)
    {

        $depotDuJour = DB::select('select distinct depot_marketeurs.id as id, montantDepot, idCptDepot
                                from depot_marketeurs, agent_marketings, compte_de_depots
                                where depot_marketeurs.idAgent =:idAgent
                                and depot_marketeurs.dateDepot = CURRENT_DATE()
                                and depot_marketeurs.idAgent = agent_marketings.id', ['idAgent' => $id ]);

                               //
                               // and compte_de_depots.id = depot_marketeurs.idCptDepot
 if (count($depotDuJour) == 0) {

             $data = [
                'error'=> true,
                'msg' => 'Pas de dépôt à ce jour'
            ];

            return $data;
        }
        else {

            foreach ($depotDuJour as $valeur)
            {
               $petiteData = [
                'idDepot' => $valeur->id,
                'montantDepot' => $valeur->montantDepot,
                'idCptDepot' => $valeur->idCptDepot

               ];
            }

            $data = [
                'error' => false,
                'donnee' => $petiteData,
                'msg' => 'Dépôt chargé avec succès'

            ];

            return $data;
        }
                               // return $depotDuJour;
    }

    public function infoCompteDep(int $id)
    {
        $info = DB::table('compte_de_depots')

        ->join('agent_marketings', 'compte_de_depots.idAgent', '=', 'agent_marketings.id')

        ->select('compte_de_depots.id as id','numCompteDep')

        ->where('compte_de_depots.idAgent', '=', $id)

        ->get();

        return $info;


    }

    public function allDepotMarketeur()
    {

        $resultAllDepMak = DB::select('select

        depot_marketeurs.id,
        depot_marketeurs.idAgent,
        depot_marketeurs.idCptDepot,
        depot_marketeurs.idUser,
        compte_de_depots.numCompteDep,
        depot_marketeurs.montantDepot,
        depot_marketeurs.dateDepot,
        agent_marketings.nomAg,
        agent_marketings.prenomAg,
        users.login

        from users, depot_marketeurs, compte_de_depots, agent_marketings

        where depot_marketeurs.idAgent = agent_marketings.id

        and depot_marketeurs.idCptDepot = compte_de_depots.id

        and depot_marketeurs.idUser = users.id');

        return $resultAllDepMak;
    }

    public function depotParDate(\Illuminate\Http\Request $request)
    {

        $depotParDate = DB::table('depot_marketeurs')

            //->join('membres', 'cotisations.idMembre', '=', 'membres.id')

            ->join('agent_marketings', 'depot_marketeurs.idAgent', '=', 'agent_marketings.id')

            ->join('users', 'depot_marketeurs.idUser', '=', 'users.id')

            ->select('depot_marketeurs.id as id', 'users.id as idUser', 'dateDepot', 'montantDepot', 'resteDepot', 'agent_marketings.id as idAgent', 'agent_marketings.nomAg as nomAg', 'agent_marketings.prenomAg as prenomAg', 'login')

            ->where('dateDepot','=',$request->dateDepot)

            ->get();

        if ($depotParDate->count())
        {
            $data = [
                'error' => false,
                'msg' => 'Enregistrement chargé avec succès',
                'nbLigne' => $depotParDate->count(),
                'donne' => $depotParDate
            ];
            return $data ;
        }
        else
        {

            $data = [
                'error' => true,
                'msg' => 'Pas de dépôt à cette date'
            ];

            return $data;

        }


    }

    public function depotParMois(\Illuminate\Http\Request $request)
    {

        $depotParMois = DB::select('select distinct depot_marketeurs.id as id, users.id as idUser, dateDepot, montantDepot, resteDepot, agent_marketings.id as idAgent, agent_marketings.nomAg as nomAg, agent_marketings.prenomAg as prenomAg, login
        from depot_marketeurs, users, agent_marketings
        where extract(month from depot_marketeurs.dateDepot) = :mois
        and depot_marketeurs.idUser = users.id
        and depot_marketeurs.idAgent = agent_marketings.id', ['mois' => $request->codeMois]);

        if ($depotParMois == [])
        {
            $data = [
                'error' => true,
                'msg' => 'Pas de dépôt dans ce mois'
            ];

            return $data;
        }else
        {
            $p = [];
            $i = 0;
            foreach ($depotParMois as $value)
            {

                $p[$i]['id'] = $value->id;
                $p[$i]['idUser'] = $value->idUser;
                //$p[$i]['numCompte'] = $value->numCompte;
                $p[$i]['dateDepot'] = $value->dateDepot;
                $p[$i]['montantDepot'] = $value->montantDepot;
                $p[$i]['resteDepot'] = $value->resteDepot;
                $p[$i]['login'] = $value->login;
                //$p[$i]['nomMembre'] = $value->nomMembre;
                //$p[$i]['prenomMembre'] = $value->prenomMembre;
                $p[$i]['idAgent'] = $value->idAgent;
                $p[$i]['nomAg'] = $value->nomAg;
                $p[$i]['prenomAg'] = $value->prenomAg;

                $i++;
            }

            $data = [
                'error' => false,
                'msg' => 'Enregistrement chargé avec succès',
                'nbLigne' => $i,
                'donne' => $p
            ];
            return $data;

        }

    }

    public function depotOperateurParJour(\Illuminate\Http\Request $request)
    {

        $depotOperateurParJour = DB::select('select distinct depot_marketeurs.id as id, users.id as idUser, dateDepot, montantDepot, resteDepot, agent_marketings.id as idAgent, agent_marketings.nomAg as nomAg, agent_marketings.prenomAg as prenomAg, login
        from depot_marketeurs, users, agent_marketings
        where  depot_marketeurs.dateDepot = :dateS
        and depot_marketeurs.idUser = :idOfUser
        and depot_marketeurs.idUser = users.id
        and depot_marketeurs.idAgent = agent_marketings.id', ['dateS' => $request->dateDepot, 'idOfUser'=>$request->idUser]);

        if ($depotOperateurParJour == [])
        {
            $data = [
                'error' => true,
                'msg' => 'Pas de dépôt à ce jour'
            ];

            return $data;
        }else
        {
            $p = [];
            $i = 0;
            foreach ($depotOperateurParJour as $value)
            {

                $p[$i]['id'] = $value->id;
                $p[$i]['idUser'] = $value->idUser;
                //$p[$i]['numCompte'] = $value->numCompte;
                $p[$i]['dateDepot'] = $value->dateDepot;
                $p[$i]['montantDepot'] = $value->montantDepot;
                $p[$i]['resteDepot'] = $value->resteDepot;
                $p[$i]['login'] = $value->login;
                //$p[$i]['nomUser'] = $value->nomUser;
                //$p[$i]['prenomUser'] = $value->prenomUser;
                $p[$i]['idAgent'] = $value->idAgent;
                $p[$i]['nomAg'] = $value->nomAg;
                $p[$i]['prenomAg'] = $value->prenomAg;

                $i++;
            }

            $data = [
                'error' => false,
                'msg' => 'Enregistrement chargé avec succès',
                'nbLigne' => $i,
                'donne' => $p
            ];
            return $data;

        }

    }

    public function depotAgentParMois(\Illuminate\Http\Request $request)
    {

        $depAgentParMois = DB::select('select distinct depot_marketeurs.id as id, users.id as idUser,  dateDepot, montantDepot, resteDepot,  agent_marketings.id as idAgent, agent_marketings.nomAg as nomAg, agent_marketings.prenomAg as prenomAg, login
        from depot_marketeurs, users, agent_marketings
        where extract(month from depot_marketeurs.dateDepot) = :mois
        and depot_marketeurs.idAgent = :idAgent
        and depot_marketeurs.idUser = users.id
        and depot_marketeurs.idAgent = agent_marketings.id', ['mois' => $request->codeMois, 'idAgent'=> $request->idAgent ]);

        if ($depAgentParMois == [])
        {
            $data = [
                'error' => true,
                'msg' => 'Pas de Dépot dans ce mois'
            ];

            return $data;
        }else
        {
            $p = [];
            $i = 0;
            foreach ($depAgentParMois as $value)
            {

                $p[$i]['id'] = $value->id;
                $p[$i]['idUser'] = $value->idUser;
                //$p[$i]['numCompte'] = $value->numCompte;
                $p[$i]['dateDepot'] = $value->dateDepot;
                $p[$i]['montantDepot'] = $value->montantDepot;
                $p[$i]['resteDepot'] = $value->resteDepot;
                $p[$i]['login'] = $value->login;
                //$p[$i]['nomMembre'] = $value->nomMembre;
                //$p[$i]['prenomMembre'] = $value->prenomMembre;
                $p[$i]['idAgent'] = $value->idAgent;
                $p[$i]['nomAg'] = $value->nomAg;
                $p[$i]['prenomAg'] = $value->prenomAg;

                $i++;
            }

            $data = [
                'error' => false,
                'msg' => 'Enregistrement chargé avec succès',
                'nbLigne' => $i,
                'donne' => $p
            ];
            return $data;

        }

    }

    public function depotOperateurParMois(\Illuminate\Http\Request $request)
    {

        $depOperateurParMois = DB::select('select distinct depot_marketeurs.id as id, users.id as idUser, login,  dateDepot, montantDepot, resteDepot,  agent_marketings.id as idAgent, agent_marketings.nomAg as nomAg, agent_marketings.prenomAg as prenomAg
        from depot_marketeurs, users, agent_marketings
        where extract(month from depot_marketeurs.dateDepot) = :mois
        and depot_marketeurs.idUser = :idUser
        and depot_marketeurs.idUser = users.id
        and depot_marketeurs.idAgent = agent_marketings.id', ['mois' => $request->codeMois, 'idUser'=> $request->idUser ]);

        if ($depOperateurParMois == [])
        {
            $data = [
                'error' => true,
                'msg' => 'Pas de Dépot dans ce mois'
            ];

            return $data;
        }else
        {
            $p = [];
            $i = 0;
            foreach ($depOperateurParMois as $value)
            {

                $p[$i]['id'] = $value->id;
                $p[$i]['idUser'] = $value->idUser;
                //$p[$i]['numCompte'] = $value->numCompte;
                $p[$i]['dateDepot'] = $value->dateDepot;
                $p[$i]['montantDepot'] = $value->montantDepot;
                $p[$i]['resteDepot'] = $value->resteDepot;
                $p[$i]['login'] = $value->login;
                //$p[$i]['nomUser'] = $value->nomUser;
                //$p[$i]['prenomUser'] = $value->prenomUser;
                $p[$i]['idAgent'] = $value->idAgent;
                $p[$i]['nomAg'] = $value->nomAg;
                $p[$i]['prenomAg'] = $value->prenomAg;

                $i++;
            }

            $data = [
                'error' => false,
                'msg' => 'Enregistrement chargé avec succès',
                'nbLigne' => $i,
                'donne' => $p
            ];
            return $data;

        }

    }



}
