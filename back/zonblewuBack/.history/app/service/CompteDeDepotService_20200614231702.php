<?php


namespace App\service;


use Illuminate\Support\Facades\DB;

use http\Client\Response;
use Illuminate\Http\Request;

use Illuminate\Support\Collection;

class CompteDeDepotService extends GenericService
{
    public function __construct()
    {
        parent::__construct();
    }


    public function findAll(string $class)
    {
         //return parent::store($req); // TODO: Change the autogenerated stub

         // requete

        $compteDeDepotListe = DB::table('compte_de_depots')

        ->join('agent_marketings', 'compte_de_depots.idAgent', '=', 'agent_marketings.id')

        ->select('compte_de_depots.id as id','numCompteDep','dateCreation', 'soldeDep', 'agent_marketings.nomAg as nomAg','agent_marketings.prenomAg as prenomAg')

        ->get();

        return $compteDeDepotListe;
    }

    public function infoCompteDepot(int $id)
    {
        $compteAgent = DB::table('compte_de_depots')

        ->join('agent_marketings', 'compte_de_depots.idAgent', '=', 'agent_marketings.id')

        ->select('compte_de_depots.id as id','numCompteDep','dateCreation', 'soldeDep', 'agent_marketings.nomAg as nomAg','agent_marketings.prenomAg as prenomAg')

        ->where('compte_de_depots.idAgent', '=', $id)

        ->get();

        return $compteAgent;
    }


    public function store(Request $req)
    {
        //return parent::store($req); // TODO: Change the autogenerated stub

        error_log('génération de numéro compte');

        // requete pour compter le nombre de ligne dans la table

        $nbLigne = DB::table('compte_de_depots')

            ->select(DB::raw('count(*) as nbr'))

            ->get();

            foreach ($nbLigne as $result) {

                $nb = $result->nbr;

            }
        error_log($nb);
        // recupération

        $numeroCompte = 10000+$nb+1;

        error_log($numeroCompte);

        $req->numCompteDep = '0'.$numeroCompte;

        $cl = $req->classe;

        // package de la classe
        $packageClass = 'App\\'.$cl;

        $instanceClasse = $packageClass::create(
            ['numCompteDep' => $req->numCompteDep,
                'dateCreation'=> $req->dateCreation,
                'idAgent' => $req->idAgent
            ]);

        $type = gettype($instanceClasse);

        if ($type == 'object') {
            //throw new \Exception('Erreur veuillez Ressayer');

            // COmmemt capturer l'erreur spécifique
            return \response()->json([
                'error' => false,
                'msg' => $cl.' créé avec succès!!'
            ], 200);
        } else {
            return \response()->json([
                'error' => true,
                'msg' => 'Erreur!! Réessayez !!',
            ]);
        }

    }

    // methode pour déposer agent Marketeur
    public function depot(Request $request)
    {
        // on prend le numero du compte
        $numCompteDep = $request->numCompteDep;

        $montant = $request->montant;

        error_log('numro compte');
        error_log($numCompteDep);

        error_log('montant');
        error_log($montant);

        // requete pour retourner les infos du compte

        $identifiant = DB::table('compte_de_depots')

                        ->join('agent_marketings', 'compte_de_depots.idAgent', '=', 'agent_marketings.id')

                        ->select('compte_de_depots.id as id', 'soldeDep', 'agent_marketings.nomAg as nomAg', 'agent_marketings.prenomAg as prenomAg')

                        ->where('numCompteDep', '=', $numCompteDep)

                        ->get();

            if($identifiant->isEmpty())
            {
                # code...
                return \response()->json([
                        'error' => true,
                        'msg' => 'Compte erroné. Réessayez svp!!'
                ]);
            }else
            {

                foreach ($identifiant as $result) {

                    $val = $result->id;

                    $sold = $result->soldeDep;

                    $nomAg = $result->nomAg;

                    $prenomAg = $result->prenomAg;

                };
                  // nouveau solde
                  $nvSolde = $sold + $request->montant;

                  $cl = $request->classe;

                  $packageClass = 'App\\'.$cl;

                  $instanceSpecifique = $packageClass::find($val);


                  $instanceSpecifique->update([
                      'soldeDep' => $nvSolde
                  ]);

                  if ($instanceSpecifique) {
                    return \response()->json([
                        'error' => false,
                        'msg' => ' Dépôt effectué avec succès!!',
                        'info' => ['proprietaire' => $nomAg. ' '. $prenomAg,
                                    'nouveauSolde' => $nvSolde]
                    ], 200)->withCallback($request->input('callback'));
                }
            }
    }
}
